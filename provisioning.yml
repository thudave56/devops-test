---
#Create the Subnets

#Create the roles

#Create the ELB

#Create the Securtity Groups

#Create the instance
- hosts: localhost
  connection: local
  gather_facts: false
  roles:
    - ec2_creation

#Configure and install all we need
- hosts: ec2hosts
  vars:
    apache_vhosts_enabled:
      servername: ec2hosts

  gather_facts: false
  remote_user: ec2-user
  roles:
      - common # install listing of yum repos needed on the server
  tasks:
    #----------------------------------------
    #----------------------------------------
    #    - name: Download and install the RVM package


    - name: Download the GP key for rvm download
      shell: curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -
      sudo: true

    - name: Download and install the rvm package
      shell: curl -L get.rvm.io | bash -s stable
      sudo: true

    - name: Create System Environment
      shell: source /etc/profile.d/rvm.sh
      sudo: true

    - name: RVM reload
      command: bash -lc "rvm reload"
      sudo: true

    - name: Fix permissions for rvm
      command: bash -lc "rvm group add rvm '$USER'"
      sudo: true
    #----------------------------------------
    #----------------------------------------
    #    - name: Download and install the Ruby package
    - name: RVM install Ruby version 2.1.0
      command: bash -lc "rvm install 2.1.0"
      sudo: true
    #----------------------------------------
    #----------------------------------------
    #    - name: Gem installs

#    - name: install gem rails
#      command: bash -lc "gem install rails --no-ri --no-rdoc"
#      sudo: true

#    - name: install gem io-console
#      command: bash -lc "gem install io-console --no-ri --no-rdoc"
#      sudo: true

    - name: Install bundler
      command: bash -lc "gem install bundler --no-ri --no-rdoc"
      sudo: true

    - name: Install sinatra
      command: bash -lc "gem install sinatra --no-ri --no-rdoc"
      sudo: true

    - name: Install passenger
      command: bash -lc "gem install passenger --no-ri --no-rdoc"
      sudo: true

    - name: Install puma
      command: bash -lc "gem install puma --no-ri --no-rdoc"
      sudo: true

    - name: update gem
      command: bash -lc "gem update --no-ri --no-rdoc"
      sudo: true

    #----------------------------------------
    #----------------------------------------
    #    - name: Setup the application folders  and permissions
    - name: create local group www
      group: name=www state=present
      sudo: true

    - name: create user
      user: name=deployer shell=/bin/bash groups=www append=yes
      sudo: true

    - name: make new directory /var/www
      file: path=/var/www state=directory owner=deployer group=www mode=0775
      sudo: true
##------------------------
##------------------------
##  -  Add and verify the sudoers files
    - name: Copy sudoers file for safety prior to adding the deployer user
      command: cp -f /etc/sudoers /etc/sudoers.tmp
      sudo: true

    - name: Create sudoers file backup
      command: cp -f /etc/sudoers /etc/sudoers.bak
      sudo: true

    - name: make sure we can sudo as deployer group
      lineinfile: dest=/etc/sudoers.tmp state=present regexp='^%deployer' line='%deployer ALL=(ALL) ALL'
      sudo: true

    - name: also make sure ssh-agent works via sudo
      lineinfile: dest=/etc/sudoers.tmp state=present regexp='^Defaults env_keep\+\=SSH_AUTH_SOCK' line='Defaults env_keep+=SSH_AUTH_SOCK'
      sudo: true

    - name: Final sudoers file check
      shell: visudo -q -c -f /etc/sudoers.tmp && cp -f /etc/sudoers.tmp /etc/sudoers
      sudo: true
##------------------------
##------------------------
##  -  Create directories for app

    - name: make new directory /var/www/devops_test
      file: path=/var/www/devops_test state=directory mode=0755
      sudo: true

    - name: make new directory /var/www/devops_test/app
      file: path=/var/www/devops_test/app state=directory mode=0755
      sudo: true

    - name: make new directory /var/www/devops_test/code
      file: path=/var/www/devops_test/code state=directory mode=0755
      sudo: true

    - name: make new directory /var/www/devops_test/tmp
      file: path=/var/www/devops_test/tmp state=directory mode=0755
      sudo: true

    - name: make new directory /var/www/devops_test/pids
      file: path=/var/www/devops_test/pids state=directory mode=0755
      sudo: true

    - name: make new directory /var/www/devops_test/logs
      file: path=/var/www/devops_test/logs state=directory mode=0755
      sudo: true

    - name: make new directory /var/www/devops_test/code/public
      file: path=/var/www/devops_test/code/public state=directory mode=0755
      sudo: true

    - name: change owner of application folder
      command: bash -lc "sudo chown -R $(whoami):$(whoami) /var/www/devops_test/"

    - name: touch file for restart.txt
      file: path=/var/www/devops_test/tmp/restart.txt state=touch mode=0644
      sudo: true

    - name: configure passenger with apache
      command: bash -lc "rvmsudo passenger-install-apache2-module --auto"

#    - replace: dest=httpd.conf regexp='**ADD_IP_HERE**' replace='"{{ ec2_info.instances[0].public_ip }}"' backup=yes
#    - template: src=/templates/httpd.conf dest=/etc/httpd/conf/httpd.conf

    #----------------------------------------
    #----------------------------------------
    #    - name:Pull down the application data
    - name: clone github repo
      git: repo=https://github.com/thudave56/devops-test.git dest=/srv/checkout update=yes
      sudo: true
# Check on the file config from the checkout and then copy it
    - name: stat config.ru
      stat: path=/srv/checkout/config.ru
      register: config_stat
      sudo: true

    - name: Move config to app directory
      command: mv /srv/checkout/config.ru /var/www/devops_test/code/config.ru
      when: config_stat.stat.exists
      sudo: true

# Check on the file app.rb from the checkout and then copy it
    - name: stat app.rb
      stat: path=/srv/checkout/app.rb
      register: app_stat
      sudo: true

    - name: Move app.rb to app directory
      command: mv /srv/checkout/app.rb /var/www/devops_test/code/app.rb
      sudo: true
      when: app_stat.stat.exists


# Check on the file Gemfile from the checkout and then copy it
    - name: stat Gemfile
      stat: path=/srv/checkout/Gemfile
      register: gemfile_stat
      sudo: true

    - name: Move Gemfile to app directory
      command: mv /srv/checkout/Gemfile /var/www/devops_test/code/Gemfile
      sudo: true
      when: gemfile_stat.stat.exists

    - name: Run the Bundle command
      command: bash -lc "cd /var/www/devops_test/code && bundle install"
      sudo: true
#      become: yes
#      become_user: deployer

    - name: Set httpd service as started
      service: name=httpd state=started
      sudo: true

    - name: Set httpd servcice to start at boot
      service: name=httpd enabled=yes
      sudo: true

    # This will call the "Restart Apache" handler whenever 'copy' alters
    # the remote httpd.conf.
    - name: Update the Apache config
      action: copy src=./templates/httpd.conf dest=/etc/httpd/httpd.conf
      sudo: true
