---
#- name: Get instance information
#  debug:
#    msg: "{{ instance_values }}"

- name: Create instances if instance name doesn't exit
  ec2:
    region: "{{ instance_values['region'] }}"
#    zone: "{{ instance_values['zone'] }}"
    keypair: "{{ instance_values['key_pair'] }}"
    group: "{{ instance_values['security_groups'] }}"
    instance_type: "{{ instance_values['instance_type'] }}"
    image: "{{ instance_values['image_id'] }}"
    exact_count: "{{ instance_values['count'] }}"
    count_tag:
        Group: "Dev_Ruby_Test"
    wait: yes
    instance_tags:
      Name: "{{ instance_values['name'] }}"
      Group: "Dev_Ruby_Test"
      Update: Yes
#when: ec2_instances.instances[instance_values['name']]|default("") == ""
#  when: ec2_instances.instances[instance_values['count']] <= "{{ instance_values['count'] }}"
  register: ec2_info

- name: Wait for instances to listen on port 22
  wait_for:
    state: started
    host: "{{ ec2_info.instances[0].public_dns_name }}"
    port: 22
    delay: 60
    timeout: 500
  when: ec2_info|changed


#- name: associate an elastic IP with an instance#
#  ec2_eip: instance_id="{{ item.id }}" ip=52.200.15.159 region=us-east-1
#  with_items: "{{ ec2_info.instances }}"

#- name: Add new instance to host group
#  add_host: hostname={{ item.public_ip }} groupname="{{ instance_values['security_groups'] }}"
#  with_items: ec2_info.instances

- name: Add new instance to ec2hosts group
  add_host:
    hostname: "{{ item.public_ip }}"
    groupname: ec2hosts
    instance_id: "{{ item.id }}"
  with_items: ec2_info.instances
  when: ec2_info|changed

#- name: Get ec2_info information
#  debug:
#    msg: "{{ ec2_info }}"
